#input {
#	tcp {
#		port => 5000
#	}
#}

## Add your filters / logstash plugins configuration here

#output {
#	elasticsearch {
#		hosts => "elasticsearch:9200"
#		user => "elastic"
#		password => "changeme"
#	}
#}

# The # character at the beginning of a line indicates a comment. Use
# comments to describe your configuration.
input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.2.10.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://postgres:5432/keycloak"
    jdbc_user => keycloak
    jdbc_password => password
    jdbc_paging_enabled => true
#    tracking_column => "unix_ts_in_secs"
    tracking_column => "event_entity"
    use_column_value => true
    tracking_column_type => "numeric"
#    tracking_column_type => "timestamp"
    schedule => "*/5 * * * * *"
    plugin_timezone => "local"
#    statement => "SELECT *, date_part('epoch',modification_time)::int  AS unix_ts_in_secs FROM log WHERE (date_part('epoch',modification_time)::int > :sql_last_value AND modification_time < NOW()) ORDER BY modification_time ASC"

    statement => "SELECT *, TO_TIMESTAMP(event_time/1000) AS modification_time 
                  FROM event_entity
                  WHERE TO_TIMESTAMP(event_time/1000) > TO_TIMESTAMP(:sql_last_value/1000)
                  AND TO_TIMESTAMP(event_time/1000) < NOW()
                  ORDER BY event_time DESC"
  }
}

input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.2.10.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://postgres:5432/keycloak"
    jdbc_user => keycloak
    jdbc_password => password
    jdbc_paging_enabled => true
#    tracking_column => "unix_ts_in_secs"
    tracking_column => "event_entity"
    use_column_value => true
    tracking_column_type => "numeric"
#    tracking_column_type => "timestamp"
    schedule => "*/5 * * * * *"
    plugin_timezone => "local"
#    statement => "SELECT *, date_part('epoch',modification_time)::int  AS unix_ts_in_secs FROM log WHERE (date_part('epoch',modification_time)::int > :sql_last_value AND modification_time < NOW()) ORDER BY modification_time ASC"

    statement => "SELECT *, TO_TIMESTAMP(admin_event_time/1000) AS modification_time 
                  FROM admin_event_entity
                  WHERE TO_TIMESTAMP(admin_event_time/1000) > TO_TIMESTAMP(:sql_last_value/1000)
                  AND TO_TIMESTAMP(admin_event_time/1000) < NOW()
                  ORDER BY admin_event_time DESC"
  }
}
# The filter part of this file is commented out to indicate that it is
# optional.

filter {
  mutate {
    copy => { "id" => "[@metadata][_id]"}
    remove_field => ["id", "@version"]
  }
}

output {
  stdout { codec =>  "rubydebug"}
  elasticsearch {
      hosts => [ "elasticsearch:9200" ]
      user => "elastic"
      password => "changeme"
      index => "audit"
      document_id => "%{[@metadata][_id]}"
  }
}